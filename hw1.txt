For 1-4, I use the method of recursion to check or operating on the head of the list and then pass on the result and the rest of the list. For 6, I have a recursion that looping until it find a x such that f(x) and x are satisfied with eq. For 7, I have a helper function that return f( ... f(x)) for applying f for n times; and, we can have the periodic point with a recursion that keep looping until it find a x that f( ... f(x))) for p times is satisfied by eq. For 8, I do a recursion that keep adding x into the result and pass down (s x) to x until the (p x) is unsatisfied. For 9, I use previous computed_fixed_point function to find the list of all terminal symbols until the new list and the old list stop changing. Each time the list is filtered, the funciton check whether a rule of the symbol is all terminable. If it is, then add the symbol to the new list. Then, use a function with the list to remove all the rules such that it cannot reach to terminal symbols. 